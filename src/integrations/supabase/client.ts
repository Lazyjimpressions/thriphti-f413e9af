
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables with fallbacks to the hardcoded values for development
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://gqjoebrphojntidztfyd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdxam9lYnJwaG9qbnRpZHp0ZnlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcyNzUxODIsImV4cCI6MjA2Mjg1MTE4Mn0.WCd3jkNWtFJ1euSGA55cxV0tFm0h2p0fZFDxV7zdCEM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to recreate client with new credentials if needed
export const recreateSupabaseClient = (url?: string, key?: string) => {
  const newUrl = url || SUPABASE_URL;
  const newKey = key || SUPABASE_PUBLISHABLE_KEY;
  return createClient<Database>(newUrl, newKey);
};

// Health check function to verify connection
export const checkSupabaseConnection = async () => {
  try {
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    return { success: !error, error: error?.message };
  } catch (err) {
    return { success: false, error: (err as Error).message };
  }
};
